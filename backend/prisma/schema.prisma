// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./diagrama.png" // Guarda la imagen en la carpeta prisma
  format   = "png" // Puedes cambiarlo a "png" o "dot"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Curso {
  id              String            @id @default(cuid())
  nombre          String            @db.VarChar(255)
  imagen          String            @db.VarChar(255)
  banner          String            @db.VarChar(255)
  horas           Int
  precio          Decimal
  categoriaId     Int
  categoria       Categorias        @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  cursosUsuarios  CursoUsuario[]
  secciones       Seccion[]
  detalles        CursoDetalles?
  beneficios      Beneficio[]
  curso_detalles  CursoPagadoDetalles[]
  @@map("cursos")
}

model Seccion {
  id            String            @id @default(cuid())
  nombre        String   
  cursoId       String
  curso         Curso             @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  posicion      Int
  clases        Clases[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Clases {
  id            String            @id @default(cuid())
  nombre        String
  duracion      String
  posicion      Int
  url_video     String
  seccionId     String
  seccion       Seccion           @relation(fields: [seccionId], references: [id], onDelete: Cascade)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model CursoDetalles {
  id            String    @id @default(cuid())
  curso         Curso     @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  cursoId       String    @unique
  objetivo      String    @db.LongText @default("")
  presentacion  String?   @db.LongText @default("")
  dirigido      String?   @db.LongText @default("")
  metodologia   String?   @db.LongText @default("")
  certificacion String?   @db.LongText @default("")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@map("cursos_detalles")
}

model Beneficio {
  id        Int    @id @default(autoincrement())
  icono     String @db.VarChar(255)
  texto     String @db.Text
  curso     Curso  @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  cursoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("beneficios")
}

model CursoUsuario {
  id        Int      @id @default(autoincrement())
  cursoId   String
  userId    String
  avance    String?
  tipo      CursoUsuarioTipo
  curso     Curso    @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  usuario   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("cursos_usuarios")
}

enum CursoUsuarioTipo {
  MATRICULADO
  CARGO
}

model Rol {
  id        Int       @id @default(autoincrement())
  nombre    String    @unique @db.VarChar(20)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Usuario   Usuario[]
  @@map("roles")
}

model Usuario {
  id                String           @id @default(cuid()) @db.Char(36)
  rolId             Int              @default(1)
  nombres           String           @db.VarChar(255)
  apellidos         String           @db.VarChar(255)
  email             String           @unique
  celular           String           @db.VarChar(15)
  password          String
  activo            Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  rol               Rol              @relation(fields: [rolId], references: [id], onDelete: Cascade)
  cursosUsuarios    CursoUsuario[]
  cursosPagados     CursoPagado[]
  @@map("usuarios")
}

model CursoPagado {
  id                         String           @id @default(cuid())
  mercadoPaymentId           String
  userId                     String
  usuario                    Usuario          @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalPagado                Decimal
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt

  @@map("ventas")
}

model CardVenta {
  id                         Int              @id @default(autoincrement())
  cardId                     String           
  country                    String
  date_created               DateTime
  date_last_updated          DateTime
  expiration_month           Int
  expiration_year            Int
  first_six_digits           String
  last_four_digits           String
}

model MethodVenta {
  id                         Int              @id @default(autoincrement())
  methodId                   String
  tipo                       String
}

model CursoPagadoDetalles {
  id                         String           @id @default(cuid())
  cursoPagadoId              String
  cursoId                    String
  cantidad                   Int              @default(1)
  precio                     Decimal
  curso                      Curso            @relation(fields: [cursoId], references: [id], onDelete: Cascade)

  @@map("ventas_detalles")
}


model Categorias {
  id            Int       @id @default(autoincrement())
  nombre        String    @db.VarChar(255)
  url_icono     String    @db.VarChar(255)
  url_imagen    String    @db.VarChar(255)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cursos        Curso[]
  @@map("categorias")
}
